// Code generated by MockGen. DO NOT EDIT.
// Source: github.go

// Package mock_api is a generated GoMock package.
package mock

import (
	gomock "github.com/golang/mock/gomock"
	models "github.com/tubone24/what-is-your-color/models"
	reflect "reflect"
)

// MockClient is a mock of Client interface
type MockClient struct {
	ctrl     *gomock.Controller
	recorder *MockClientMockRecorder
}

// MockClientMockRecorder is the mock recorder for MockClient
type MockClientMockRecorder struct {
	mock *MockClient
}

// NewMockClient creates a new mock instance
func NewMockClient(ctrl *gomock.Controller) *MockClient {
	mock := &MockClient{ctrl: ctrl}
	mock.recorder = &MockClientMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use
func (m *MockClient) EXPECT() *MockClientMockRecorder {
	return m.recorder
}

// GetColor mocks base method
func (m *MockClient) GetColor(username string) (error, []models.GitHubLang) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetColor", username)
	ret0, _ := ret[0].(error)
	ret1, _ := ret[1].([]models.GitHubLang)
	return ret0, ret1
}

// GetColor indicates an expected call of GetColor
func (mr *MockClientMockRecorder) GetColor(username interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetColor", reflect.TypeOf((*MockClient)(nil).GetColor), username)
}

// CallApi mocks base method
func (m *MockClient) CallApi(username string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CallApi", username)
	ret0, _ := ret[0].(error)
	return ret0
}

// CallApi indicates an expected call of CallApi
func (mr *MockClientMockRecorder) CallApi(username interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CallApi", reflect.TypeOf((*MockClient)(nil).CallApi), username)
}
